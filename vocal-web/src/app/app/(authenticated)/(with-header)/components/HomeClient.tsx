'use client'

import { useProfile } from '@/hooks/useProfile'
import { httpClient } from '@/services/httpClient'
import { useQuery, useSuspenseQuery } from '@tanstack/react-query'
import { Dropdown, Modal } from 'antd'
import { Ellipsis } from 'lucide-react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'

const bgColors = ['#d4edfc', '#ffe5cf', '#f0dcf6', '#ffe5cf']

const emojis = [
  'üê∂',
  'üê±',
  'üê≠',
  'üêπ',
  'üê∞',
  'ü¶ä',
  'üêª',
  'üêº',
  'üêª‚Äç‚ùÑÔ∏è',
  'üê®',
  'üêØ',
  'ü¶Å',
  'üêÆ',
  'üê∑',
  'üêΩ',
  'üêÄ',
  'üêá',
  'üêâ',
  'üêç',
  'üêé',
  'üêê',
  'üêí',
  'üêì',
  'üê∂',
  'üêñ',
  'üê±',
  'ü¶â',
  'üêü',
  'üê¢',
  'üêù',
  'üêõ',
  'ü¶ã',
  'üêå',
  'üêû',
  'üêú',
  'üï∑',
  'üï∏',
  'ü¶Ç',
  'ü¶Ä',
  'üêô',
  'üê¨',
  'üê≥',
  'ü¶ñ',
  'ü¶ï',
  'ü¶Ñ',
  'ü¶©',
  'ü¶ú',
  'ü¶ö',
  'üêøÔ∏è',
  'ü¶î',
  'ü¶¶',
  'ü¶•',
  'ü¶ò',
  'ü¶ô',
  'ü¶í',
  'üêò',
  'ü¶è',
  'ü¶õ',
  'üê™',
  'üê´',
  'üêÉ',
  'üêÇ',
  'üêÑ',
  'üêé',
  'üêñ',
  'üêè',
  'üêë',
  'üêê',
  'ü¶å',
  'üêï',
  'üê©',
  'ü¶Æ',
  'üêï‚Äçü¶∫',
  'üêà',
  'üêà‚Äç‚¨õ',
  'üêì',
  'ü¶É',
  'ü¶§',
  'üïäÔ∏è',
  'üêá',
  'ü¶ù',
  'ü¶®',
  'ü¶°',
  'ü¶´',
  'ü¶¶',
  'ü¶•',
  'üêÅ',
  'üêÄ',
  'üêøÔ∏è',
  'ü¶î',
  'üêæ',
  'üêâ',
  'üê≤',
  'üê¶‚Äçüî•',
  'üåµ',
  'üéÑ',
  'üå≤',
  'üå≥',
  'üå¥',
  'ü™µ',
  'üå±',
  'üåø',
  '‚òòÔ∏è',
  'üçÄ',
  'üéç',
  'ü™¥',
  'üéã',
  'üçÉ',
  'üçÇ',
  'üçÅ',
  'üçÑ',
  'üçÑ‚Äçüü´',
  'üêö',
  'ü™®',
  'üåæ',
  'üíê',
  'üå∑',
  'üåπ',
  'ü•Ä',
  'üå∫',
  'üå∏',
]

export default function HomeClient() {
  const { profile } = useProfile()
  const router = useRouter()

  const { data, isLoading } = useQuery({
    queryKey: ['my-collections', profile?.id],
    queryFn: ({ queryKey }) =>
      httpClient.get(`/users/${queryKey[1]}/collections`).then((r) => r.data),
    enabled: !!profile?.id,
  })

  // Loading state
  if (isLoading) {
    return <div className="text-white text-center">Loading...</div>
  }

  // N·∫øu kh√¥ng c√≥ b·ªô t·ª´
  if (!data || data.length === 0) {
    return (
      <div className="text-center text-white mt-10">
        <p>B·∫°n ch∆∞a c√≥ b·ªô t·ª´ n√†o. H√£y t·∫°o m·ªõi m·ªôt b·ªô t·ª´!</p>
        <Link href="/app/collections/create">
          <button className="mt-4 bg-blue-500 text-white py-3 px-6 rounded-full hover:bg-blue-600 transition duration-300 font-bold">
            + T·∫°o m·ªõi
          </button>
        </Link>
      </div>
    )
  }

  return (
    <div className="flex flex-col p-6">
      {/* Ti√™u ƒë·ªÅ */}
      <h1 className="text-2xl font-bold mb-10">Vocabulary Sets</h1>

      {/* Danh s√°ch b·ªô t·ª´ */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 w-full">
        {data.map((collection, index) => (
          <Link
            href={`/app/collections/${collection.id}/learn`}
            key={collection.id}
            style={{
              backgroundColor: bgColors[index % bgColors.length],
            }}
            className="rounded-lg shadow-lg px-4 py-3 hover:shadow-xl transition duration-300 flex items-center justify-between gap-3"
          >
            <div className="flex gap-2">
              <span className="text-4xl font-bold">{emojis[index % emojis.length]}</span>

              <div>
                <h3 className="text-lg font-semibold">{collection.name}</h3>
                <span>{collection.words.length} words</span>
              </div>
            </div>

            <div onClick={(e) => e.preventDefault()}>
              <Dropdown
                menu={{
                  items: [
                    {
                      key: 'edit',
                      label: 'Edit',
                      onClick: (e) => {
                        router.push(`/app/collections/${collection.id}/update`)
                      },
                    },
                    {
                      key: 'delete',
                      label: 'Delete',
                      onClick: () => {
                        Modal.confirm({
                          title: 'Are you sure delete this collection?',
                          centered: true,
                          okText: 'Yes',
                          cancelText: 'No',
                          onOk: () => {
                            httpClient.delete(`/collections/${collection.id}`).then(() => {
                              router.refresh()
                            })
                          },
                        })
                      },
                    },
                  ],
                }}
              >
                <Ellipsis />
              </Dropdown>
            </div>
          </Link>
        ))}
      </div>
    </div>
  )
}
